name: Deploy to RHEL 9 Server (Nginx)

on:
  push:
    branches: ["master"] # Trigger deployment only on pushes to the main branch

env:
  APP_DIR: /home/deploy_user/app # Directory for your app on the server
  SERVICE_NAME: fastapi_app # Name of the systemd service
  ARTIFACT_NAME: app.tar.gz # Name of the packaged artifact

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy FastAPI Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Archive project files
        run: |
          tar --exclude='./.git' \
              --exclude='./.github' \
              --exclude='./.venv' \
              --exclude='__pycache__' \
              --exclude='*.pyc' \
              --warning=no-file-changed \
              --ignore-failed-read \
              -czf "${{ env.ARTIFACT_NAME }}" .

      - name: Copy package to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: ${{ env.ARTIFACT_NAME }}
          target: /tmp/

      - name: Execute deployment on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e

            echo "Deploying to ${{ env.APP_DIR }} on server..."

            sudo mkdir -p "${{ env.APP_DIR }}"
            sudo tar -xzf "/tmp/${{ env.ARTIFACT_NAME }}" -C "${{ env.APP_DIR }}"
            sudo chown -R ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} "${{ env.APP_DIR }}"

            cd "${{ env.APP_DIR }}"
            sudo -u ${{ secrets.SERVER_USER }} bash -c '
              if [ ! -d "venv" ]; then python3 -m venv venv; fi
              source venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt --no-cache-dir
            '

            sudo systemctl restart "${{ env.SERVICE_NAME }}"
            rm -f "/tmp/${{ env.ARTIFACT_NAME }}"

            echo "âœ… Deployment completed successfully."
